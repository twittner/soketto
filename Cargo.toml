[package]
name = "soketto"
version = "0.3.0"
authors = ["Parity Technologies <admin@parity.io>", "Jason Ozias <jason.g.ozias@gmail.com>"]
description = "A websocket protocol implementation as as set of tokio codecs."
keywords = ["tokio", "websocket", "codec"]
license = "Apache-2.0 OR MIT"
readme = "README.md"
repository = "https://github.com/paritytech/soketto"
edition = "2018"

[package.metadata.docs.rs]
all-features = true

[features]
deflate = ["flate2"]

# This feature enables the use of uninitialised memory for the deflate
# extension. When compressing or decompressing, an uninitialised byte
# slice will be used for writing the resulting bytes, assuming that
# flate2 really only writes to and does not read from this memory.
deflate_with_uninitialised_memory = []

# This feature enables the use of uninitialised memory in conjunction with
# `AsyncRead::read`. It relies on the implementation of `AsyncRead` to not
# read from but only to write to this byte slice. We used to use
# `AsyncRead::initialize` and the resulting `futures::io::Initializer`
# for this purpose, but the later became an unstable API beginning
# with futures-preview 0.3.0-alpha.19 so by default we now do zero the
# byte slice before calling `read` unless this feature is used.
read_with_uninitialised_memory = []

[dependencies]
base64 = "0.10.1"
bytes = "0.4.12"
flate2 = { version = "1.0.8", features = ["zlib"], default-features = false, optional = true }
futures-preview = { version = "0.3.0-alpha.19", features = ["unstable", "bilock"] }
http = "0.1.17"
httparse = "1.3.3"
log = "0.4.6"
rand = "0.6.5"
sha1 = "0.6.0"
smallvec = "0.6.9"
static_assertions = "0.3.4"

[dev-dependencies]
assert_matches = "1.3.0"
async-std = "0.99"
env_logger = "0.6.1"
quickcheck = "0.8.5"
